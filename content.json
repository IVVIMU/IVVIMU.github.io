{"meta":{"title":"IVVIMU","subtitle":"","description":"","author":"Linmu","url":"https://IVVIMU.github.io","root":"/"},"pages":[{"title":"tags","date":"2020-04-16T04:09:21.000Z","updated":"2020-04-16T07:11:38.981Z","comments":true,"path":"tags/index.html","permalink":"https://ivvimu.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-04-16T05:36:15.000Z","updated":"2020-04-16T07:11:25.275Z","comments":true,"path":"categories/index.html","permalink":"https://ivvimu.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"jjj","slug":"jjj","date":"2020-05-01T12:53:20.000Z","updated":"2020-05-01T12:53:20.956Z","comments":true,"path":"2020/05/01/jjj/","link":"","permalink":"https://ivvimu.github.io/2020/05/01/jjj/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Javascript学习记录（二) 预解析","slug":"Javascript学习记录（二) 预解析","date":"2020-04-24T13:45:32.000Z","updated":"2020-04-29T12:28:34.914Z","comments":true,"path":"2020/04/24/Javascript学习记录（二) 预解析/","link":"","permalink":"https://ivvimu.github.io/2020/04/24/Javascript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C)%20%E9%A2%84%E8%A7%A3%E6%9E%90/","excerpt":"Javascript引擎运行JS代码分为两步：预解析——代码执行 预解析——把JS代码里所有的变量和函数提升到当前作用域的最前面 预解析分为变量预解析（变量提升）和函数预解析（函数提升） 变量提升就是把所有的变量声明提升到当前作用域最前面，不提升赋值操作 函数提升就是把所有函数声明提升到当前作用域的最前面，不调用函数 代码执行——按照代码书写的顺序从上往下执行","text":"Javascript引擎运行JS代码分为两步：预解析——代码执行 预解析——把JS代码里所有的变量和函数提升到当前作用域的最前面 预解析分为变量预解析（变量提升）和函数预解析（函数提升） 变量提升就是把所有的变量声明提升到当前作用域最前面，不提升赋值操作 函数提升就是把所有函数声明提升到当前作用域的最前面，不调用函数 代码执行——按照代码书写的顺序从上往下执行 实例 作用域实例 12345678var num = 10;function fn() &#123; console.log(num); var num = 20; console.log(num);&#125;fn(); 以上实例相当于执行以下代码 123456789var num;function fn() &#123; var num; console.log(num); num = 20 console.log(num);&#125;num = 10;fn(); Console输出： undenfined 20 赋值操作实例 12345fun();// 函数表达式var fun = funciton() &#123; console.log(22)&#125; Console报错——Uncaught TypeError: fun is not a function …. 以上实例相当于执行以下代码 123456var fun; fun();fun = function() &#123; console.log(22);&#125;// 函数表达式，调用必须写在函数表达式的下面 经典实例 1234567891011fn();console.log(c);console.log(b);console.log(a);function f1() &#123; var a = b = c = 9; console.log(a); console.log(b); console.log(c);&#125; var a = b = c = 9 相当于 var a = 9; b = 9; c = 9; b 和 c 直接赋值，没有var声明，为全局变量 注意区别集体声明——var a = 9, b = 9, c = 9; 故上述实例相当于执行以下代码 123456789101112function f1() &#123; var a; a = b = c = 9; console.log(a); console.log(b); console.log(c);&#125;fn();console.log(c);console.log(b);console.log(a); Console输出 9 9 9 9 9 Uncaught ReferenceError: a is not defined 2020.04.25 修改代码块","categories":[{"name":"Records","slug":"Records","permalink":"https://ivvimu.github.io/categories/Records/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://ivvimu.github.io/tags/JavaScript/"}]},{"title":"Javascript学习记录（一)  运算符","slug":"Javascript学习记录（一)  运算符","date":"2020-04-19T11:10:04.000Z","updated":"2020-04-25T07:43:12.705Z","comments":true,"path":"2020/04/19/Javascript学习记录（一)  运算符/","link":"","permalink":"https://ivvimu.github.io/2020/04/19/Javascript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80)%20%20%E8%BF%90%E7%AE%97%E7%AC%A6/","excerpt":"递增与递减运算符前置递增和后置递增小结 前置：先变量自加1，后表达式返回值； 后置：先表达式原值返回，后变量自加1；","text":"递增与递减运算符前置递增和后置递增小结 前置：先变量自加1，后表达式返回值； 后置：先表达式原值返回，后变量自加1； 单独使用时，运行结果相同； 与其他代码联用时，执行结果会不同； 大多使用后置递增/减，且代码独占一行； 递增实例123456789101112131415var a = 10;++a; //++a==11 a==11var b = ++a + 2; //a==12 ++a==12console.log(b); //14var c = 10;c++; //c++==11 C==11var d = c++ + 2; //c++==11 c==12console.log(d); //13var e = 10;var f = e++ + ++e; //e++==10 e==11 |--| e==12 ++e==12console.log(f); //22//后置自增，先表达式返回原值，后变量再自加1 递减同理 比较运算符 符号 作用 用法 = 赋值 符号右边赋值给符号左边 == (!=) 判断 判断两边值是否相等（有隐式转换） ===(!==) 判断 判断两边的值和数据类型是否完全相同(不同类型不比较，切且无结果，同类型才比较) 12console.log(18 == \"18\"); //trueconsole.log(18 === \"18\"); //true 注意 1console.log(NaN != NaN); //true NaN是除数字的任意值，但绝不是确切的某一个值； NaN是一个范围,而不能代表一个确定的值。 逻辑运算符短路运算（逻辑中断） 短路运算原理：当有多个表达式（值）时，左边的表达式值可以确定结果时，就不再继续运算右边表达式的值 逻辑与 语法：表达式1 &amp;&amp; 表达式2 如果第一个表达式的值为真，则返回表达式2 如果第一个表达式的值为假，则返回表达式1 1234console.log(123 &amp;&amp; 456); //456console.log(0 &amp;&amp; 456); //0console.log(0 &amp;&amp; 1 + 2 &amp;&amp; 456 * 567); //0console.log('' &amp;&amp; 1 + 2 &amp;&amp; 456 * 567); //'' 逻辑或 语法：表达式1 || 表达式2 如果第一个表达式为真，则返回表达式1 如果第一个表达式为假，则返回表达式2 1234567console.log(123 || 456); //123console.log(123 || 456 || 456 + 123); //123console.log(0 || 456 ||456 + 123); //456var num = 0;console.log(123 || num++); //123console.log(num); //0 2020.04.19 创建 2020.04.20 短路运算（逻辑中断）增补 2020.04.25 修改代码块","categories":[{"name":"Records","slug":"Records","permalink":"https://ivvimu.github.io/categories/Records/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://ivvimu.github.io/tags/JavaScript/"}]},{"title":"博客日志","slug":"博客日志","date":"2020-04-15T14:14:33.000Z","updated":"2020-05-01T11:53:37.315Z","comments":true,"path":"2020/04/15/博客日志/","link":"","permalink":"https://ivvimu.github.io/2020/04/15/%E5%8D%9A%E5%AE%A2%E6%97%A5%E5%BF%97/","excerpt":"这是博客日志详情点击阅读更多","text":"这是博客日志详情点击阅读更多这里没有任何有价值的文字存在，但表情包或许存在。 所有博客功能最开始都会在该博客测试，如果你机缘巧合看到， 对于浪费了你生命的10秒钟时间，我真的感到非常私密马赛。 欢迎在Gitalk板块留言，发个表情包也可以啊。 2020.04.17,21:37 MU 2020.04.29 21:25 更改侧边栏样式。 发现Ayer原作者没有为侧边栏写Javascript代码，采用了更改CSS样式达成目的，造成移动端不兼容，待修正及添加Javascript。2020.05.01 Github安全警示，更新jQuery，出现Bug","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-04-15T09:08:24.090Z","updated":"2020-04-21T10:52:47.411Z","comments":true,"path":"2020/04/15/hello-world/","link":"","permalink":"https://ivvimu.github.io/2020/04/15/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Hello HexoQuick StartCreate a new post","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Hello HexoQuick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"Records","slug":"Records","permalink":"https://ivvimu.github.io/categories/Records/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://ivvimu.github.io/tags/JavaScript/"}]}